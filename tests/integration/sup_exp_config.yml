# Telegram Bot
# telegram_config_file: telegram_config.yml


# Dataset and Splits
data_root: tests/integration/debug/DATA/
dataset_class: tests.data.test_data_splitter.FakeGraphClassificationDataset
dataset_name:  mock_dataset
data_splits_file:  tests/integration/debug/DATA_SPLITS/mock_dataset/mock_dataset_outer10_inner1.splits


# Hardware
device:  cpu
max_cpus:  1
max_gpus: 0
gpus_per_task: 0


# Data Loading
dataset_getter: pydgn.data.provider.DataProvider
data_loader:
  class_name: torch_geometric.loader.DataLoader
  args:
    num_workers : 0
    pin_memory: False


# Reproducibility
seed: 42


# Experiment
result_folder: tests/integration/debug/RESULTS
exp_name: test_full_experiment_sup
experiment: pydgn.experiment.supervised_task.SupervisedTask
higher_results_are_better: True
evaluate_every: 1
final_training_runs: 3


grid:
  supervised_config:
    model: pydgn.model.dgn.toy_dgn.ToyDGN
    checkpoint: False
    shuffle:
      - True
      - False
    batch_size: 32
    epochs: 3

    # Model specific arguments #

    dim_embedding: 5
    num_layers:
      - 2
    aggregation: mean

    # ------------------------ #

    # Optimizer (with an example - 3 possible alternatives)
    optimizer:
      - class_name: pydgn.training.callback.optimizer.Optimizer
        args:
          optimizer_class_name: torch.optim.Adam
          lr:
            - 0.01
            - 0.001
          weight_decay: 0.

    # Scheduler (optional)
    scheduler:
      - class_name: pydgn.training.callback.scheduler.EpochScheduler
        args:
          scheduler_class_name: torch.optim.lr_scheduler.StepLR
          step_size: 0.95
          gamma: 0.1

    # Loss metric (with an example of Additive Loss)
    loss:
      - class_name: pydgn.training.callback.metric.AdditiveLoss
        args:
          loss_1: pydgn.training.callback.metric.MulticlassClassification
          loss_2: pydgn.training.callback.metric.MulticlassClassification


    # Score metric (with an example of Multi Score)
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          main_scorer: pydgn.training.callback.metric.MulticlassAccuracy
          my_second_metric: pydgn.training.callback.metric.ToyMetric

    # Readout (optional)
    readout: pydgn.model.readout.graph_readout.LinearGraphReadout

    # Training engine
    engine: pydgn.training.engine.TrainingEngine

    # Gradient clipper (optional)
    gradient_clipper:
      - class_name: pydgn.training.callback.gradient_clipping.GradientClipper
        args:
          clip_value: 100

    # Early stopper (optional, with an example of "patience" early stopping on the validation score)
    early_stopper:
      - class_name:
          - pydgn.training.callback.early_stopping.PatienceEarlyStopper
        args:
          patience:
            - 1
          # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
          monitor: validation_main_score
          mode: max  # is best the `max` or the `min` value we are monitoring?
          checkpoint: False  # store the best checkpoint

    # Plotter of metrics
    plotter: pydgn.training.callback.plotter.Plotter