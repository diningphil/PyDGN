# Telegram Bot
# telegram_config_file: telegram_config.yml


# Dataset and Splits
data_root: DATA
dataset_class: pydgn.data.dataset.TUDatasetInterface
dataset_name:  NCI1
data_splits_file:  examples/DATA_SPLITS/CHEMICAL/NCI1/NCI1_outer10_inner1.splits


# Hardware
device:  cpu
max_cpus:  16
max_gpus: 1
gpus_per_task:  1
# gpus_subset: 0,1,2,3,4,5,6,7,8


# Data Loading
dataset_getter: pydgn.data.provider.DataProvider
data_loader:
  class_name: torch_geometric.loader.DataLoader
  args:
    num_workers : 0
    pin_memory: False


# Reproducibility
seed: 42


# Experiment
result_folder: RESULTS
exp_name: supervised_grid_search_toy
experiment: pydgn.experiment.supervised_task.SupervisedTask
higher_results_are_better: True
evaluate_every: 3
final_training_runs: 3


grid:
  supervised_config:
    model: pydgn.model.dgn.toy_dgn.ToyDGN
    checkpoint: True
    shuffle: True
    batch_size: 512
    epochs: 3

    # Model specific arguments #

    dim_embedding: 5
    num_layers:
      - 3
      - 5
    aggregation: mean

    # ------------------------ #

    # Optimizer (with an example - 3 possible alternatives)
    optimizer:
      - class_name: pydgn.training.callback.optimizer.Optimizer
        args:
          optimizer_class_name: torch.optim.Adam
          lr:
            - 0.01
            - 0.001
          weight_decay: 0.

    # Scheduler (optional)
    scheduler: null

    # Loss metric (with an example of Additive Loss)
    loss:
      - class_name: pydgn.training.callback.metric.AdditiveLoss
        args:
          loss_1: pydgn.training.callback.metric.MulticlassClassification
          loss_2: pydgn.training.callback.metric.MulticlassClassification
          losses_weights:
            Multiclass Classification:
              - 1.
              - 0.
          accumulate_over_epoch:
            - True
            - False


    # Score metric (with an example of Multi Score)
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          main_scorer: pydgn.training.callback.metric.MulticlassAccuracy
          my_second_metric: pydgn.training.callback.metric.ToyMetric
          gpu_mem: pydgn.training.callback.metric.AllocatedGPUMemory

    # Readout (optional)
    readout: pydgn.model.readout.graph_readout.LinearGraphReadout

    # Training engine
    engine:
      - class_name: pydgn.training.engine.TrainingEngine
        args:
          eval_training:  # whether to re-compute epoch loss/scores after training or use those obtained while the model is being trained with mini-batches
            - False  # default behavior since 1.5.1, saves some compute time as we are generally interested in validation scores
            - True  # re-evaluates on training set after each training epoch, might not change much loss/score values and causes overhead

    # Gradient clipper (optional)
    gradient_clipper: null

    # Early stopper (optional, with an example of "patience" early stopping on the validation score)
    early_stopper:
      - class_name:
          - pydgn.training.callback.early_stopping.PatienceEarlyStopper
        args:
          patience:
            - 10
          # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
          monitor: validation_main_score
          mode: max  # is best the `max` or the `min` value we are monitoring?
          checkpoint: True  # store the best checkpoint

    # Plotter of metrics
    plotter:
      - class_name: pydgn.training.callback.plotter.Plotter
        args:
          store_on_disk: True